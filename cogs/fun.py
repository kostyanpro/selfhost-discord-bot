import discord
from discord.ext import commands
import random
import aiohttp
import json
import sys

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ stdout –∏ stderr –≤ —Ñ–∞–π–ª
log_file = open('bot.log', 'a', encoding='utf-8')
sys.stdout = log_file
sys.stderr = log_file

with open('config.json', 'r') as file:
    config = json.load(file)

class FunCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name='meme')
    async def meme(self, ctx):
        async with aiohttp.ClientSession() as session:
            async with session.get('https://meme-api.com/gimme') as response:
                if response.status == 200:
                    data = await response.json()
                    meme_url = data['url']
                    embed = discord.Embed(
                        title=data['title'],
                        color=int(config["info_color"], 16)
                    )
                    embed.set_image(url=meme_url)
                    await ctx.message.reply(embed=embed)
                else:
                    embed = discord.Embed(
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º.",
                        color=int(config["error_color"], 16)
                    )
                    embed.set_thumbnail(url=config["error_icon"])
                    await ctx.message.reply(embed=embed)

    @commands.command(name='joke')
    async def joke(self, ctx):
        async with aiohttp.ClientSession() as session:
            async with session.get('https://v2.jokeapi.dev/joke/Any?lang=ru') as response:
                if response.status == 200:
                    data = await response.json()
                    if data['type'] == 'single':
                        joke_text = data['joke']
                    else:
                        joke_text = f"{data['setup']}\n\n{data['delivery']}"
                    embed = discord.Embed(
                        title="–®—É—Ç–∫–∞",
                        description=joke_text,
                        color=int(config["info_color"], 16)
                    )
                    embed.set_thumbnail(url=config["info_icon"])
                    await ctx.message.reply(embed=embed)
                else:
                    embed = discord.Embed(
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É.",
                        color=int(config["error_color"], 16)
                    )
                    embed.set_thumbnail(url=config["error_icon"])
                    await ctx.message.reply(embed=embed)

    @commands.command(name='cat')
    async def cat(self, ctx):
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.thecatapi.com/v1/images/search') as response:
                if response.status == 200:
                    data = await response.json()
                    cat_url = data[0]['url']
                    embed = discord.Embed(
                        title="–ö–æ—Ç–∏–∫!",
                        color=int(config["info_color"], 16)
                    )
                    embed.set_image(url=cat_url)
                    await ctx.message.reply(embed=embed)
                else:
                    embed = discord.Embed(
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞.",
                        color=int(config["error_color"], 16)
                    )
                    embed.set_thumbnail(url=config["error_icon"])
                    await ctx.message.reply(embed=embed)

    @commands.command(name='dog')
    async def dog(self, ctx):
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.thedogapi.com/v1/images/search') as response:
                if response.status == 200:
                    data = await response.json()
                    dog_url = data[0]['url']
                    embed = discord.Embed(
                        title="–°–æ–±–∞—á–∫–∞!",
                        color=int(config["info_color"], 16)
                    )
                    embed.set_image(url=dog_url)
                    await ctx.message.reply(embed=embed)
                else:
                    embed = discord.Embed(
                        title="–û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±–∞—á–∫—É.",
                        color=int(config["error_color"], 16)
                    )
                    embed.set_thumbnail(url=config["error_icon"])
                    await ctx.message.reply(embed=embed)

    @commands.command(name='8ball')
    async def eight_ball(self, ctx, *, question: str):
        responses = [
            "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ.",
            "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ.",
            "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π.",
            "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞.",
            "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º.",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª.",
            "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ.",
            "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.",
            "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª.",
            "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ.",
            "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å.",
            "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.",
            "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å.",
            "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π.",
            "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª.",
            "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª.",
            "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.",
            "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ."
        ]
        answer = random.choice(responses)
        embed = discord.Embed(
            title="üé± –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä",
            description=f"**–í–æ–ø—Ä–æ—Å:** {question}\n**–û—Ç–≤–µ—Ç:** {answer}",
            color=int(config["info_color"], 16)
        )
        embed.set_thumbnail(url=config["info_icon"])
        await ctx.message.reply(embed=embed)

    @commands.command(name='roll')
    async def roll(self, ctx, sides: int = 6):
        if sides < 2:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞",
                description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1.",
                color=int(config["error_color"], 16)
            )
            embed.set_thumbnail(url=config["error_icon"])
            await ctx.message.reply(embed=embed)
            return

        result = random.randint(1, sides)
        embed = discord.Embed(
            title="üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞",
            description=f"–í—ã –±—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫ —Å {sides} —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –∏ –≤—ã–ø–∞–ª–æ **{result}**!",
            color=int(config["info_color"], 16)
        )
        embed.set_thumbnail(url=config["info_icon"])
        await ctx.message.reply(embed=embed)

async def setup(bot):
    await bot.add_cog(FunCommands(bot))